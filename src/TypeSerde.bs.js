// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

var Types1 = /* module */[];

var schemaPropertyName = "$schemaVersion";

function deserialize_Spaceship____ship(record) {
  var match = Js_json.classify(record);
  if (typeof match === "number" || match.tag !== 2) {
    return /* Error */Block.__(1, [/* :: */[
                "Expected an object",
                /* [] */0
              ]]);
  } else {
    var match$1 = Js_dict.get(match[0], "name");
    if (match$1 !== undefined) {
      var match$2 = Js_json.classify(Caml_option.valFromOption(match$1));
      var match$3;
      match$3 = typeof match$2 === "number" || match$2.tag !== 1 ? /* Error */Block.__(1, [/* :: */[
              "Expected a float",
              /* [] */0
            ]]) : /* Ok */Block.__(0, [match$2[0] | 0]);
      if (match$3.tag) {
        return /* Error */Block.__(1, [/* :: */[
                    "attribute 'name'",
                    match$3[0]
                  ]]);
      } else {
        return /* Ok */Block.__(0, [/* record */[/* name */match$3[0]]]);
      }
    } else {
      return /* Error */Block.__(1, [/* :: */[
                  "No attribute 'name'",
                  /* [] */0
                ]]);
    }
  }
}

function serialize_Spaceship____ship(record) {
  return Js_dict.fromArray(/* array */[/* tuple */[
                "name",
                record[/* name */0]
              ]]);
}

var Version1 = /* module */[
  /* deserialize_Spaceship____ship */deserialize_Spaceship____ship,
  /* serialize_Spaceship____ship */serialize_Spaceship____ship
];

function parseVersion(json) {
  var match = Js_json.classify(json);
  if (typeof match === "number") {
    return /* Error */Block.__(1, ["Must have a schema version"]);
  } else {
    switch (match.tag | 0) {
      case 2 : 
          var match$1 = Js_dict.get(match[0], schemaPropertyName);
          if (match$1 !== undefined) {
            var match$2 = Js_json.classify(Caml_option.valFromOption(match$1));
            if (typeof match$2 === "number" || match$2.tag !== 1) {
              return /* Error */Block.__(1, ["Invalid $schemaVersion"]);
            } else {
              return /* Ok */Block.__(0, [/* tuple */[
                          match$2[0] | 0,
                          json
                        ]]);
            }
          } else {
            return /* Error */Block.__(1, ["No $schemaVersion present"]);
          }
      case 3 : 
          var match$3 = match[0];
          if (match$3.length !== 2) {
            return /* Error */Block.__(1, ["Must have a schema version"]);
          } else {
            var version = match$3[0];
            var payload = match$3[1];
            var match$4 = Js_json.classify(version);
            if (typeof match$4 === "number" || match$4.tag !== 1) {
              return /* Error */Block.__(1, ["Invalid wrapped version"]);
            } else {
              return /* Ok */Block.__(0, [/* tuple */[
                          match$4[0] | 0,
                          payload
                        ]]);
            }
          }
      default:
        return /* Error */Block.__(1, ["Must have a schema version"]);
    }
  }
}

function wrapWithVersion(version, payload) {
  var match = Js_json.classify(payload);
  if (typeof match === "number") {
    return /* array */[
            version,
            payload
          ];
  } else if (match.tag === 2) {
    var dict = match[0];
    dict[schemaPropertyName] = version;
    return dict;
  } else {
    return /* array */[
            version,
            payload
          ];
  }
}

function serializeShip(data) {
  return wrapWithVersion(1, serialize_Spaceship____ship(data));
}

function deserializeShip(data) {
  var match = parseVersion(data);
  if (match.tag) {
    return /* Error */Block.__(1, [/* :: */[
                match[0],
                /* [] */0
              ]]);
  } else {
    var match$1 = match[0];
    var version = match$1[0];
    if (version !== 1) {
      return /* Error */Block.__(1, [/* :: */[
                  "Unexpected version " + String(version),
                  /* [] */0
                ]]);
    } else {
      var match$2 = deserialize_Spaceship____ship(match$1[1]);
      if (match$2.tag) {
        return /* Error */Block.__(1, [match$2[0]]);
      } else {
        return /* Ok */Block.__(0, [match$2[0]]);
      }
    }
  }
}

var Ship = /* module */[
  /* serialize */serializeShip,
  /* deserialize */deserializeShip
];

var Modules = /* module */[/* Ship */Ship];

var currentVersion = 1;

var Current = 0;

exports.Types1 = Types1;
exports.currentVersion = currentVersion;
exports.schemaPropertyName = schemaPropertyName;
exports.Version1 = Version1;
exports.Current = Current;
exports.parseVersion = parseVersion;
exports.wrapWithVersion = wrapWithVersion;
exports.serializeShip = serializeShip;
exports.deserializeShip = deserializeShip;
exports.Modules = Modules;
/* No side effect */
